#!/bin/bash

#
# I create links and folders for testing tConnect
#

# global variables

webroot="/var/www"
mode="app"
tconnect_dir=$(dirname "$( cd "$( dirname "$0" )" && pwd )")
yellow='\e[0;33m'
endColor='\e[0m'

# functions

function usage(){
	echo "tconnect-setup - setup tool for tconnect.
Usage: 	tconnect-setup	app 	[options] 		
Description: Setup an empty application site with an extension for trace
	Options:
		-s	Site name of the application. 
			This option is required. 
			For example: app1.com

		-H	Host name of the application. 
			Default is localhost.

		-p	Port of the application. 
			By default, 8002 in case Hostname is 'localhost' 
			and 80 if Hostname is not 'localhost'.
	
		-m	Mode of setup [dev,runtime]. 
			Default is 'runtime'. 
			In the 'dev' mode, the links used instead of copying the folders.

Usage: 	tconnect-setup	app-ext	[options] 		
Description: Setup an extension for trace in an existing site
	Options:
		-d	Site directory of the application site. 
			This option is required. 
			For example: /var/www/app1.com (without a '/' in the end)
	
		-m	Mode of setup [dev,runtime]. 
			Default is 'runtime'. 
			In the 'dev' mode, the links used instead of copying the folders.  

Usage: 	tconnect-setup 	assist 	[options]  		
Description: Setup an assistance site
	Options:
		-s	Site name of the application. 
			This option is required. 
			For example: assist.com

		-H	Host name of the application. 
			Default is localhost.

		-p	Port of the application. 
			By default, 8003 in case Hostname is 'localhost' 
			and 8003 if Hostname is not 'localhost'.
	
		-m	Mode of setup [dev,runtime]. 
			Default is 'runtime'. 
			In the 'dev' mode, the links used instead of copying the folders.  
	
Usage: 	tconnect-setup 	ktbs install			
Description: Install dependencies of the ktbs	

Usage:	tconnect-setup 	ktbs populate <ktbs_base_url>	
Description: Populate data for ktbs
	Options:	
	ktbs_base_url	The base URL of the ktbs. 
			This option is required. 
			For example: http://localhost:8001/
			Attention: Base urls end with a '/'

Usage: 	tconnect-setup 	ktbs	[options]		
Description: Launch a ktbs instance
	Options:
		-H	Host name of the ktbs. 
			Default is localhost.

		-p	Port of the ktbs. 
			Default is 8001.

		-r	the filename/identifier of the RDF database stocked in the folder '/ktbs/data/'  (default: db_demo). 
	
Usage: 	tconnect-setup 	rollback <trans_id>		
Description: Rollback an transaction
	Options:	
	trans_id	The ID of transaction.
";
}

function add_hostname(){
	local host_name=$1
	local trans_dir=$2
	
	if [ -z $host_name ]
	then
		exit;
	fi

	# backup & rollback	
	cp -p /etc/hosts "$trans_dir/hosts" || { echo "backup failed"; exit 1; }
	echo "cp -pf \"$trans_dir/hosts\" /etc/hosts" >> "$trans_dir/rollback"

	# remove if exists
	sed -i "s/ $host_name//" /etc/hosts
	
	echo "Hostname: $host_name"

	# add new hostname after localhost
	sed -i "s/localhost/localhost $host_name/" /etc/hosts
	
	# log
	echo "*  modified		/etc/hosts			backup:	$trans_dir/hosts"
}

function add_port_listen(){
	local port=$1
	local trans_dir=$2
	
	# backup	
	cp -p /etc/apache2/ports.conf "$trans_dir/ports.conf" || { echo "backup failed"; exit 1; }
	echo "cp -pf \"$trans_dir/ports.conf\" /etc/apache2/ports.conf" >> "$trans_dir/rollback"
	
	# check and add new Listen if not exist
	[[ $(grep "^Listen[^0-9]*$port[^0-9]*" /etc/apache2/ports.conf) ]] || sed -i "s/Listen/Listen $port\nListen/" /etc/apache2/ports.conf
	
	# log	
	# diff /etc/hosts "/etc/hosts.bk."d_now
	echo "*  modified		/etc/apache2/ports.conf		backup:	$trans_dir/ports.conf"
}

function enable_site(){
	local site_name=$1
	local host_name=$2
	local port=$3
	local type=$4 # []
	local trans_dir=$5
	local sitef="/etc/apache2/sites-available/$site_name" # site file

	### sites-available
	
	# check file exist
	if [ -f $sitef ]; then echo "Error: file $sitef exists"; exit; fi
	# copy the default
	cp -p /etc/apache2/sites-available/default $sitef	|| { echo "copy failed"; exit; }	

	# backup && rollback
	echo "a2dissite \"$site_name\" " >> "$trans_dir/rollback"
	echo "rm \"$sitef\" " >> "$trans_dir/rollback"

	# configure ServerName, DocumentRoot, Port, Enable	
	if grep "ServerName" $sitef
	then
	    # if found 
	    sed -i "s/ServerName .*/ServerName $host_name/" $sitef 
	else
	    # if not found	    
	    sed -i "s/DocumentRoot/ServerName $host_name\n\tDocumentRoot/"  $sitef
	fi
	site_dir="$webroot/$site_name"

	# modify DocumentRoot
	sed -i  "s,DocumentRoot .*,DocumentRoot $site_dir," $sitef
	# modify Port
	sed -i  "s,\*:80,\*:$port," $sitef
	# modify AllowOverride None => All (first twice positions) for rewrite module. 
	sed -i  "s,AllowOverride None,AllowOverride All," $sitef
	sed -i  "s,AllowOverride None,AllowOverride All," $sitef

	# modify ports.conf
	add_port_listen $port $trans_dir
	
	# enable rewrite module	
	a2enmod rewrite
	
	# enable site
	a2ensite $site_name
	# restart apache2
	# summary
	echo "*	 added 		$sitef"
	#echo "INFO: Apache needs to be restarted: /etc/init.d/apache2 restart !!!"
	# restart apache2	
	service apache2 restart	

	case "$port" in
		"443") 	echo "INFO: Site at https://$host_name/"
    			;;
		"80") 	echo "INFO: Site at http://$host_name/"
    			;;
		*) 	echo "INFO: Site at http://$host_name:$port/"
    			;;
	esac
}

function make_assist(){
	local mode=$1 # [runtime,dev]
	local sitename=$2
	local type="assist"
	local site_dir="$webroot/$sitename"
	local trans_dir=$3

	# check directory exist
	if [ -d $site_dir ]; then echo "Error: directory $site_dir exists"; exit; fi
	
	# copy 
	if [ $mode = "dev" ]
	then
		ln -s "$tconnect_dir/tAssistance" "$site_dir"
		ln -s "$tconnect_dir/tService" "$site_dir/tService"
		
	elif [ $mode = "runtime" ]
	then
		cp -rp "$tconnect_dir/tAssistance" "$site_dir"
		cp -rp "$tconnect_dir/tService" "$site_dir/tService"
	fi

	# backup && rollback	
	echo "rm -rf \"$site_dir\" " >> "$trans_dir/rollback"

	# copy .htaccess
	#if [ $mode = "runtime" ]
	#then
	#	cp "$tconnect_dir/scripts/.htaccess-$type" "$site_dir/.htaccess"
	#fi
	#if [ $mode = "dev" ]
	#then
	#	ln -s "$tconnect_dir/scripts/.htaccess-$type" "$site_dir/.htaccess"
	#fi		
	#
	echo "* added		$site_dir"
}

function make_app_ext(){
	local mode=$1 # [runtime,dev]
	local sitedir=$2
	local type="app"
	#local site_dir="$webroot/$sitename"
		
	if [ $mode = "dev" ]
	then
		ln -s "$tconnect_dir/tApp" "$site_dir/tApp"
		ln -s "$tconnect_dir/tService" "$site_dir/tService"
	
	elif [ $mode = "runtime" ]
	then		
		cp -rp "$tconnect_dir/tApp" "$site_dir/tApp"
		cp -rp "$tconnect_dir/tService" "$site_dir/tService"
	fi	

	# set rights for config

	if [ $mode = "runtime" ]
	then
		chmod o+w -R "$site_dir/tApp/config"	
	elif [ $mode = "dev" ]
	then
		chmod o+w -R "$tconnect_dir/tApp/config"
	fi

	
}

function make_app(){
	local mode=$1 # [runtime,dev]
	local sitename=$2
	local type="app"
	local site_dir="$webroot/$sitename"

	# check directory exist
	if [ -d $site_dir ]; then echo "Error: directory $site_dir exists"; exit; fi
	mkdir "$site_dir" || { echo "make directory failed"; exit; }
	
	make_app_ext $mode $site_dir

	# copy index.html as an example
	if [ $mode = "runtime" ]
	then
		cp -p "$tconnect_dir/app/index.html" "$site_dir/index.html"		
	elif [ $mode = "dev" ]
	then
		ln -s "$tconnect_dir/app/index.html" "$site_dir/index.html"
	fi
	
	echo "*  added		$site_dir"
	
}

function config_database(){
	# require passwords for root user
	read -p "Please, enter the password for "root" user in mysql : " pass
	# make 'tassistance' database and 'tuser' user
	mysql -uroot -p$pass < "$tconnect_dir/scripts/init_db.sql"
	# make tables
	mysql -utuser -ptuser tassistance < "$tconnect_dir/scripts/make_tables.sql"
}

function run_ktbs(){
	host=$1
	port=$2
	repo=$3

	ktbs_dir="$tconnect_dir/ktbs"
	
	$ktbs_dir/bin/./ktbs -H $host -p $port -r "$ktbs_dir/data/$repo" --cors-allow-origin=* -A 0 -P jsonld_adhoc		
}

function install_ktbs(){
	local ktbs_dir=$1

	install_package "python-pip"
	install_package "curl"
	sudo pip install -r "$ktbs_dir/requirements.txt"
	sudo python "$ktbs_dir/setup.py" install
	#sudo chmod 777 "$ktbs_dir/bin/ktbs"
}

function install_package(){
	the_package_name=$1
	PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $the_package_name|grep "install ok installed")

	if [ "" == "$PKG_OK" ]; then
		sudo apt-get --force-yes --yes install $the_package_name
	fi
}

function make_transaction(){
	local trans_id=$0
	mkdir "$tconnect_dir/$trans_id"
}

function install_reqs_app(){
	# packages
	install_package "apache2"
	install_package "libapache2-mod-php5"
	install_package "php5-curl"
}

function install_reqs_assist(){
	# install packages
	install_package "apache2"
	install_package "libapache2-mod-php5"
	install_package "php5-curl"
	install_package "mysql-server"
	install_package "php5-mysql"
}

# commands

if [[ "$1" = "-help" || "$1" = "--help" ]]
then
	usage
	exit;
fi

if [[ "$1" = "status" ]]
then	
	echo "** 	Global variables"
	echo "**	webroot=$webroot"
	echo "**	tconnect_dir=$tconnect_dir"
	exit
fi

if [[ "$1" = "app" ]]
then	
	sitename="app1.com"
	port="8002"
	hostname="localhost"
	mode="runtime"

	s_true=true
	p_false=true
	OPTIND=2 # Reset is necessary if getopts was used previously in the script.
     	while getopts "s:H:p:m:" opt; do
          case "$opt" in
	     s)
                 sitename=$OPTARG
		 s_true=false
		 ;;
             H)
                 hostname=$OPTARG
		 ;;
             p)  port=$OPTARG
		 p_false=false
                 ;;
             m)  mode=$OPTARG
                 ;;
          esac
     	done
  	shift $((OPTIND-1)) # Shift off the options and optional --.

	if $s_true ;
	then
		echo "-s is required"
		exit
	fi

	if [[ $hostname != "localhost" && "$p_false" = "true" ]]
	then
		port="80"
	fi

	# install packages
	install_reqs_app
	
	make_app $mode $sitename
	
	# protect system files with transaction
	trans_id=$(date "+%s")
	trans_dir="$tconnect_dir/scripts/$trans_id"
	mkdir $trans_dir
	echo -e "${yellow}Transaction Id: $trans_id. If an error occurs, use the command 'tconnect_setup rollback' for rollback the transaction !!! ${endColor}" 

	add_hostname $hostname $trans_dir
	
	enable_site $sitename $hostname $port "app" $trans_dir

	exit
fi

# 	make tApp as an extension
if [[ "$1" = "app-ext" ]]
then	
	site_dir="/var/www/app1" # 
	mode="runtime"
	
	d_true=true # flag for -d
	OPTIND=2 # Reset is necessary if getopts was used previously in the script.
     	while getopts "d:m:" opt; do
          case "$opt" in
	     d)
                 site_dir=$OPTARG
		 d_true=false
		 ;;
             m)  mode=$OPTARG
                 ;;
          esac
     	done
  	shift $((OPTIND-1)) # Shift off the options and optional --.

	if $d_true;
	then
		echo "-d is required"
		exit;
	fi
	
	install_reqs_app	

	make_app_ext $mode $site_dir	

	echo "INFO: It should enable 'rewrite module' for your site: http://askubuntu.com/questions/48362/how-to-enable-mod-rewrite-in-apache"
	
	exit 
fi

if [[ "$1" = "assist" ]]
then	
	sitename="assist.com"
	hostname="localhost"
	port="8003"
	mode="runtime"
	
	s_true=true
	p_false=true
	OPTIND=2 # Reset is necessary if getopts was used previously in the script.
     	while getopts "s:H:p:m:" opt; do
          case "$opt" in
	     s)
                 sitename=$OPTARG
		 s_true=false
		 ;;
             H)
                 hostname=$OPTARG
		 ;;
             p)  port=$OPTARG
		 p_false=false
                 ;;
             m)  mode=$OPTARG
                 ;;
          esac
     	done
  	shift $((OPTIND-1)) # Shift off the options and optional --.

	if $s_true;
	then
		echo "-s is required"
		exit;
	fi

	if [[ $hostname != "localhost" && "$p_false" = "true" ]]
	then
		port="80"
	fi

	# install packages
	install_reqs_assist
	
	make_assist $mode $sitename

	# protect system files with transaction
	trans_id=$(date "+%s")
	trans_dir="$tconnect_dir/scripts/$trans_id"
	mkdir $trans_dir
	echo -e "${yellow}Transaction Id: $trans_id. If an error occurs, use the command 'tconnect_setup rollback' for rollback the transaction !!! ${endColor}" 

	add_hostname $hostname $trans_dir
	
	enable_site $sitename $hostname $port "assist" $trans_dir
		
	config_database	
		
	echo "- done -"
	exit
fi

#	run ktbs 
if [[ "$1" = "ktbs" && "$2" = "start" ]]
then	
	host="localhost"
	port="8001"
	repo="db_demo"
	
	#h_true=0
	OPTIND=2 # Reset is necessary if getopts was used previously in the script.
     	while getopts "H:p:d:" opt; do
          case "$opt" in
             H)
                 host=$OPTARG
		 ;;
             p)  port=$OPTARG
                 ;;
             r)  repo=$OPTARG
                 ;;
          esac
     	done
  	shift $((OPTIND-1)) # Shift off the options and optional --.
		
	run_ktbs $host $port $repo
	exit
fi

#	install ktbs 
if [[ "$1" = "ktbs" && "$2" = "install" ]]
then	
	ktbs_dir="$tconnect_dir/ktbs"
	install_ktbs $ktbs_dir
	exit
fi

# 	initialize base et trace in ktbs
if [[ "$1" = "ktbs" && "$2" = "populate" ]]
then	
	ktbs_dir="$tconnect_dir/ktbs"
	url="$3"
	headers="-HContent-type:text/turtle"

	if [ "$url" = "" ]; then echo "a base url is required"; exit; fi
	# adding a base
	curl $url -XPOST $headers --data-binary @$tconnect_dir/scripts/bas_ozalid.ttl
	# adding a model
	# curl $url/base1/ -XPOST $headers --data-binary @$dir/mod_model1.ttl
	# adding a primary trace
	curl $url"ozalid/" -XPOST $headers --data-binary @$tconnect_dir/scripts/trc_t4.ttl
	exit
fi


# 	rollback

if [[ "$1" = "rollback" ]]
then	
	trans_id=$2
	trans_dir="$tconnect_dir/scripts/$trans_id" # 

	bash -x "$tconnect_dir/scripts/$trans_id/rollback"

	echo "-- done --"	
	exit 
fi

usage
